1. Create 5 children processes from a common parent and ensure that the
parent terminates after cleaning all the terminated children using waitpid().
The waitpid() must be called after all the children are created
and the parent has completed its work real work,if any. You must interpret
the exit code of the cleaned-up processes, using waitpid(), in parent process
â€“ you must cover all the possible scenarios !!!

#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main()
{
        pid_t pid;
        int i;
        pid_t child_pids[5];


        for (i=1; i<=5; i++)
        {
		pid = fork();
		if(pid<0)
		{
			/* something went wrong */
                        /* parent exits */
                           perror("fork");
                           exit(1);
		}
		if(pid==0)
		{
                        /*Children process*/
                          child_pids[i] = getpid();
                          printf(" CHILD: number (and return value): %d PID: %d PPID: %d \n", i, getpid(), getppid());
                          exit(i);
                          break;

                        /*Missing code for parent process - will be executed out of loop*/
                }
        }
        /*Parent process*/
        if (pid>0)
        {  int status;
           printf("PARENT: my PID is %d\n", getpid());

                for (i=1; i<=5; i++)
                {
                        waitpid(child_pids[i], &status, 0);
                        printf("PARENT: Child: %d returned value is: %d\n", i, WEXITSTATUS(child_pids[i]));
                }
        }

return 0;
}
